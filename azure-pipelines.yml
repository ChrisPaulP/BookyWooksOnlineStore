trigger:
- master

pool:
  vmImage: ubuntu-latest

# ðŸ”‘ Pull in secrets from Azure DevOps Library
variables:
- group: BookyWooksSecrets   # <-- variable group containing OpenAI__OpenAiApiKey
- name: buildConfiguration
  value: 'Release'
- name: BuildParameters.RestoreBuildProjects
  value: '**/*.csproj'
- name: BuildParameters.UnitTestProjects
  value: |
    $(BuildParameters.RestoreBuildProjects)
    !**/*FunctionalTests*.csproj
    !**/*IntegrationTests*.csproj
    !**/BookWooks.OrderApi.FunctionalTests.csproj
    !**/BookyWooks.OrderApi.IntegrationTests.csproj
    !**/BookWooks.OrderApi.TestContainersIntegrationTests.csproj
    !**/SagaOrchestration.IntegrationTests.csproj
- name: BuildParameters.IntegrationTestProjects
  value: |
    **/*IntegrationTests*.csproj
    **/BookWooks.OrderApi.TestContainersIntegrationTests.csproj
    !**/SagaOrchestration.IntegrationTests.csproj

jobs:
- job: BuildAndTest
  displayName: Build and Test with Testcontainers

  steps:
    # âœ… Ensure Docker is running and stable
    - script: |
        sudo service docker start
        echo "Waiting for Docker to be ready..."
        until docker info >/dev/null 2>&1; do
          echo "Docker not ready yet, retrying..."
          sleep 2
        done
        docker info
      displayName: Ensure Docker is ready

    # âœ… Build MCPServer Docker Image
    - script: |
        cd $(Build.SourcesDirectory)
        docker build -t bookwooks/mcpserver:latest -f BookWooks.MCPServer/Dockerfile .
      displayName: Build MCPServer Docker Image
      
    # âœ… Verify Docker Image
    - script: |
        docker images bookwooks/mcpserver:latest
      displayName: Verify Docker Image

    # âœ… Debug MCPServer container startup
    - script: |
        echo "Running MCPServer debug startup..."
        docker run --rm \
          -e OpenAI__OpenAiApiKey=$(OpenAI__OpenAiApiKey) \
          -e OpenAI__EmbeddingModelId=text-embedding-3-small \
          -e OpenAI__ModelId=gpt-4o-mini \
          bookwooks/mcpserver:latest || true

        echo "Checking logs..."
        docker logs $(docker ps -alq) || true
      displayName: Debug MCPServer container startup

    # âœ… Restore NuGet Packages
    - task: DotNetCoreCLI@2
      displayName: Restore NuGet Packages
      inputs:
        command: restore
        projects: $(BuildParameters.RestoreBuildProjects)
        configuration: $(buildConfiguration)

    # âœ… Build Solution
    - task: DotNetCoreCLI@2
      displayName: Build Solution
      inputs:
        command: build
        projects: |
          **/*.csproj
          !**/SagaOrchestration.IntegrationTests.csproj
        arguments: '--configuration $(buildConfiguration)'

    # âœ… Run Unit Tests
    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      inputs:
        command: test
        projects: $(BuildParameters.UnitTestProjects)
        arguments: --configuration $(buildConfiguration) --no-build --logger trx
      env:
        ASPNETCORE_ENVIRONMENT: Test

    # âœ… Run Integration Tests (Testcontainers)
    - task: DotNetCoreCLI@2
      displayName: Run Integration Tests (Testcontainers)
      inputs:
        command: test
        projects: $(BuildParameters.IntegrationTestProjects)
        arguments: --configuration $(buildConfiguration) --no-build --logger trx
      env:
        TESTCONTAINERS_HOST_OVERRIDE: 'localhost'
        TESTCONTAINERS_RYUK_DISABLED: 'true'
        DOCKER_HOST: 'unix:///var/run/docker.sock'
        # ðŸ‘‡ OpenAI secret from Library is auto-injected into container
        OpenAI__OpenAiApiKey: $(OpenAI__OpenAiApiKey)

    # âœ… Publish Test Results
    - task: PublishTestResults@2
      displayName: Publish Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: '**/TestResults/*.trx'
        mergeTestResults: true

    # âœ… Publish App Artifacts
    - task: DotNetCoreCLI@2
      displayName: Publish App
      inputs:
        command: publish
        publishWebProjects: false
        projects: $(BuildParameters.RestoreBuildProjects)
        arguments: --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
        zipAfterPublish: true

    # âœ… Publish Build Artifacts
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      condition: succeededOrFailed()
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)
        TargetPath: '\\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)'