trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
 # system.debug: true  # Enable verbose logging

steps:
- task: DockerCompose@0
  displayName: "Run a Docker Compose command"
  inputs:
    dockerComposeFile: "docker-compose-integration-tests.yml"
    dockerComposeCommand: "up --abort-on-container-exit" 

- script: |
    # Get the container ID of the running Docker Compose service
    container_id=$(docker-compose -f docker-compose-integration-tests.yml ps -q bookywooks_orderapi_integrationtests)

    if [ -z "$container_id" ]; then
        echo "Error: Container ID not found. Aborting."
        exit 1
    fi

    # Get the container name associated with the container ID
    container_name=$(docker inspect --format '{{.Name}}' $container_id)

    if [ -z "$container_name" ]; then
        echo "Error: Container name not found. Aborting."
        exit 1
    fi

    # Remove the leading slash from the container name
    container_name=${container_name#/}

    # Save the logs of the container to integration-test-results.txt
    docker logs $container_name > integration-test-results.txt
  displayName: 'Save Docker integration test results'


- task: DotNetCoreCLI@2
  displayName: Restore Nuget Packages 
  inputs:
     command: restore
     projects: '**/*.csproj'
     configuration: $(buildConfiguration)  # Use the main build configuration variable

- task: DotNetCoreCLI@2
  displayName: 'dotnet build $(buildConfiguration)'
  inputs:
    command: 'build'
    projects: '**/BookyWooks.sln'
    arguments: '--configuration $(buildConfiguration)'

- script: docker --version
  displayName: 'Print Docker Version'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    projects: '**/*UnitTests.csproj'
    arguments: '--configuration $(buildConfiguration) --no-build'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    projects: '**/*Tests.csproj'
    arguments: '--no-build --configuration Release --filter "-not DisplayName~*IntegrationTests"'

- script: |
    if [ -f "/tests/booky-wooks-integration-test-results.xml" ]; then
      echo "Test results file exists."
    else
      echo "Test results file does not exist."
    fi
  displayName: 'Check if test results file exists'

# - script: |
#    cat /tests/booky-wooks-integration-test-results.xml
#   displayName: 'Display Test Results'

# - task: CopyFiles@2
#   displayName: 'Copy Test Results'
#   inputs:
#     SourceFolder: '/tests'
#     Contents: '**/booky-wooks-integration-test-results.xml'
#     TargetFolder: '$(Build.ArtifactStagingDirectory)/TestResults/'


