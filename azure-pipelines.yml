trigger:
  - master

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'

jobs:
- job: BuildAndTest
  displayName: Build and Run Tests with Testcontainers

  steps:
  # 1. Install .NET SDK
  - task: UseDotNet@2
    inputs:
      packageType: sdk
      version: 8.0.x

  # 2. Restore NuGet packages
  - task: DotNetCoreCLI@2
    displayName: Restore Nuget Packages 
    inputs:
      command: restore
      projects: '**/*.csproj'

  # 3. Build solution
  - task: DotNetCoreCLI@2
    displayName: Build Solution
    inputs:
      command: build
      projects: '**/BookyWooks.sln'
      arguments: '--configuration $(buildConfiguration)'

  # 4. Check Docker is available (Testcontainers needs Docker)
  - script: docker --version
    displayName: Check Docker Availability

  # 5. Run all tests (unit + integration)
  - task: DotNetCoreCLI@2
    displayName: Run All Tests (Including Testcontainers Integration Tests)
    inputs:
      command: test
      projects: |
        **/*UnitTests*.csproj
        **/*IntegrationTests*.csproj
        **/*TestContainersIntegrationTests*.csproj
      arguments: --configuration $(buildConfiguration) --no-build --logger trx

  # 6. Publish test results to DevOps
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '**/*.trx'
      failTaskOnFailedTests: true

  # 7. Publish build artifacts (optional)
  - task: DotNetCoreCLI@2
    displayName: Publish App (Optional)
    inputs:
      command: publish
      publishWebProjects: false
      projects: '**/BookyWooks.sln'
      arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      zipAfterPublish: true

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
