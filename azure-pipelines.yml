trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  BuildParameters.RestoreBuildProjects: '**/*.csproj'
  BuildParameters.TestProjects: |
    $(BuildParameters.RestoreBuildProjects)
    !**/*FunctionalTests*.csproj
    !**/*IntegrationTests*.csproj
    !**/BookWooks.OrderApi.FunctionalTests.csproj
    !**/BookyWooks.OrderApi.IntegrationTests.csproj
    !**/BookWooks.OrderApi.TestContainersIntegrationTests.csproj

jobs:
- job: BuildAndTest
  displayName: Build and Test with Testcontainers

  steps:
    # ✅ Start Docker (Ubuntu hosted agent)
    - script: |
        sudo service docker start
        docker --version
      displayName: Start Docker

    # ✅ Run Integration Tests in Docker Compose (Testcontainers: SQL + RabbitMQ)
    - task: DockerCompose@1
      displayName: Run Integration Tests (Testcontainers)
      inputs:
        dockerComposeFile: "docker-compose-integration-tests.yml"
        dockerComposeCommand: "up --abort-on-container-exit"
        projectName: "bookywooks_onlinestore"
      env:
        COMPOSE_PROJECT_NAME: 'bookywooks_onlinestore'
        CONTAINER_NAME: 'bookywooks_orderapi_integrationtests'

    # ✅ Publish TRX Test Results from Mounted Volume
    - task: PublishTestResults@2
      displayName: Publish Integration Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: '**/tests-results/booky-wooks-integration-test-results.xml'
        mergeTestResults: true

    # ✅ Restore NuGet Packages for Remaining Projects
    - task: DotNetCoreCLI@2
      displayName: Restore NuGet Packages
      inputs:
        command: restore
        projects: $(BuildParameters.RestoreBuildProjects)
        configuration: $(buildConfiguration)

    # ✅ Build the Solution (excludes integration tests)
    - task: DotNetCoreCLI@2
      displayName: Build Solution
      inputs:
        command: build
        projects: '**/BookyWooks.sln'
        arguments: '--configuration $(buildConfiguration)'

    # ✅ Run Unit Tests (excludes integration tests)
    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      inputs:
        command: test
        projects: $(BuildParameters.TestProjects)
        arguments: --configuration $(buildConfiguration) --no-build --logger trx
      env:
        ASPNETCORE_ENVIRONMENT: Test
        TESTCONTAINERS_HOST_OVERRIDE: 'localhost'
        DOCKER_HOST: 'unix:///var/run/docker.sock'

    # ✅ Publish App Artifacts (Optional)
    - task: DotNetCoreCLI@2
      displayName: Publish App
      inputs:
        command: publish
        publishWebProjects: false
        projects: $(BuildParameters.RestoreBuildProjects)
        arguments: --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
        zipAfterPublish: true

    # ✅ Publish Build Artifacts (Optional)
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      condition: succeededOrFailed()
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)
        TargetPath: '\\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)'
