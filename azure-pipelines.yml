trigger:
  - master

pool:
  vmImage: ubuntu-latest

variables:
  - group: BookyWooksSecrets
  - name: buildConfiguration
    value: 'Release'
  - name: BuildParameters.RestoreBuildProjects
    value: '**/*.csproj'
  - name: BuildParameters.UnitTestProjects
    value: |
      $(BuildParameters.RestoreBuildProjects)
      !**/*FunctionalTests*.csproj
      !**/*IntegrationTests*.csproj
      !**/BookWooks.OrderApi.FunctionalTests.csproj
      !**/BookyWooks.OrderApi.IntegrationTests.csproj
      !**/BookWooks.OrderApi.TestContainersIntegrationTests.csproj
      !**/SagaOrchestration.IntegrationTests.csproj
  - name: BuildParameters.IntegrationTestProjects
    value: |
      **/*IntegrationTests*.csproj
      **/BookWooks.OrderApi.TestContainersIntegrationTests.csproj
      !**/SagaOrchestration.IntegrationTests.csproj

jobs:
  - job: BuildAndTest
    displayName: Build and Test with Testcontainers
    steps:
      - script: |
          sudo service docker start
          echo "Waiting for Docker to be ready..."
          until docker info >/dev/null 2>&1; do
            echo "Docker not ready yet, retrying..."
            sleep 2
          done
          docker info
        displayName: Ensure Docker is ready

      - script: |
          cd $(Build.SourcesDirectory)
          docker build -t bookwooks/mcpserver:latest -f BookWooks.MCPServer/Dockerfile .
        displayName: Build MCPServer Docker Image

      - script: |
          docker images bookwooks/mcpserver:latest
        displayName: Verify Docker Image

      - script: |
          echo "Starting MCPServer container..."
          docker run --name mcp-debug \
            -e OpenAIOptions__OpenAiApiKey="${OPENAI_KEY}" \
            -e OpenAIOptions__ChatModelId="gpt-4o-mini" \
            -e OpenAIOptions__EmbeddingModelId="text-embedding-3-small" \
            -e ASPNETCORE_URLS="http://+:8181" \
            -d bookwooks/mcpserver:latest

          echo "Listing OpenAI env vars inside container..."
          docker exec mcp-debug printenv | grep OpenAIOptions__

          echo "Waiting for 'Application started' in container logs..."
          for i in {1..30}; do
            if docker logs mcp-debug 2>&1 | grep "Application started"; then
              echo "MCPServer started!"
              break
            else
              echo "Waiting for MCPServer to start..."
              sleep 2
            fi
          done

          echo "Final container logs:"
          docker logs mcp-debug

          docker rm -f mcp-debug || true
        displayName: Start and Verify MCPServer
        env:
          OPENAI_KEY: $(OpenAIOptions__OpenAiApiKey)

      - task: DotNetCoreCLI@2
        displayName: Restore NuGet Packages
        inputs:
          command: restore
          projects: $(BuildParameters.RestoreBuildProjects)
          configuration: $(buildConfiguration)

      - task: DotNetCoreCLI@2
        displayName: Build Solution
        inputs:
          command: build
          projects: |
            **/*.csproj
            !**/SagaOrchestration.IntegrationTests.csproj
          arguments: '--configuration $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: Run Unit Tests
        inputs:
          command: test
          projects: $(BuildParameters.UnitTestProjects)
          arguments: --configuration $(buildConfiguration) --no-build --logger trx
        env:
          ASPNETCORE_ENVIRONMENT: Test

      - task: DotNetCoreCLI@2
        displayName: Run Integration Tests (Testcontainers)
        inputs:
          command: test
          projects: $(BuildParameters.IntegrationTestProjects)
          arguments: --configuration $(buildConfiguration) --no-build --logger trx
        env:
          TESTCONTAINERS_HOST_OVERRIDE: 'localhost'
          TESTCONTAINERS_RYUK_DISABLED: 'true'
          DOCKER_HOST: 'unix:///var/run/docker.sock'
          OpenAIOptions__OpenAiApiKey: $(OpenAIOptions__OpenAiApiKey)
          OpenAIOptions__ChatModelId: "gpt-4o-mini"
          OpenAIOptions__EmbeddingModelId: "text-embedding-3-small"

      - task: PublishTestResults@2
        displayName: Publish Test Results
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: '**/TestResults/*.trx'
          mergeTestResults: true

      - task: DotNetCoreCLI@2
        displayName: Publish App
        inputs:
          command: publish
          publishWebProjects: false
          projects: $(BuildParameters.RestoreBuildProjects)
          arguments: --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
          zipAfterPublish: true

      - task: PublishBuildArtifacts@1
        displayName: Publish Artifact
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)
          TargetPath: '\\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)'