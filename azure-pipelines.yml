trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
 # system.debug: true  # Enable verbose logging

steps:
- task: DockerCompose@0
  inputs:
    dockerComposeFile: "docker-compose-integration-tests.yml"
    dockerComposeCommand: "up --abort-on-container-exit" 
  displayName: 'Run Docker Compose and save test results'
  continueOnError: true  # Allow pipeline to continue even if the Docker Compose step fails
  timeoutInMinutes: 10  # Adjust timeout as needed
  condition: succeeded()  # Only execute this step if the previous steps succeeded
  env:
    CONTAINER_NAME: 'bookywooks_orderapi_integrationtests'  # Define the container name here

  # Add a script to save the test results
- script: |
    # Save the logs of the container to integration-test-results.txt
    docker logs ${CONTAINER_NAME} > integration-test-results.txt

- task: DotNetCoreCLI@2
  displayName: Restore Nuget Packages 
  inputs:
     command: restore
     projects: '**/*.csproj'
     configuration: $(buildConfiguration)  # Use the main build configuration variable

- task: DotNetCoreCLI@2
  displayName: 'dotnet build $(buildConfiguration)'
  inputs:
    command: 'build'
    projects: '**/BookyWooks.sln'
    arguments: '--configuration $(buildConfiguration)'

- script: docker --version
  displayName: 'Print Docker Version'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    projects: '**/*UnitTests.csproj'
    arguments: '--configuration $(buildConfiguration) --no-build'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    projects: '**/*Tests.csproj'
    arguments: '--no-build --configuration Release --filter "-not DisplayName~*IntegrationTests"'

- script: |
    if [ -f "/tests/booky-wooks-integration-test-results.xml" ]; then
      echo "Test results file exists."
    else
      echo "Test results file does not exist."
    fi
  displayName: 'Check if test results file exists'
