trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  BuildParameters.RestoreBuildProjects: '**/*.csproj'
  BuildParameters.TestProjects: |
    $(BuildParameters.RestoreBuildProjects)
    !**/*FunctionalTests*.csproj
    !**/*IntegrationTests*.csproj
    !**/BookWooks.OrderApi.FunctionalTests.csproj
    !**/BookyWooks.OrderApi.IntegrationTests.csproj
    **/BookWooks.OrderApi.TestContainersIntegrationTests.csproj

jobs:
- job: BuildAndTest
  displayName: Build and Test with Testcontainers

  steps:
    # ✅ Ensure Docker is available and running
    - script: |
        sudo service docker start
        docker --version
      displayName: Start Docker

    # ✅ Restore NuGet Packages
    - task: DotNetCoreCLI@2
      displayName: Restore NuGet Packages
      inputs:
        command: restore
        projects: $(BuildParameters.RestoreBuildProjects)
        configuration: $(buildConfiguration)

    # ✅ Build the Solution
    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: '**/BookyWooks.sln'
        arguments: '--configuration $(buildConfiguration)'

    # ✅ Run Tests (Testcontainers will start SQL, RabbitMQ, Redis automatically)
    - task: DotNetCoreCLI@2
      displayName: Run Integration & Unit Tests
      inputs:
        command: test
        projects: $(BuildParameters.TestProjects)
        arguments: --configuration $(buildConfiguration) --no-build --logger trx
      env:
        # ✅ Testcontainers settings to ensure proper networking in CI
        TESTCONTAINERS_HOST_OVERRIDE: 'localhost'
        DOCKER_HOST: 'unix:///var/run/docker.sock'

    # ✅ Publish the App (optional for CI/CD)
    - task: DotNetCoreCLI@2
      displayName: Publish App
      inputs:
        command: publish
        publishWebProjects: false
        projects: $(BuildParameters.RestoreBuildProjects)
        arguments: --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
        zipAfterPublish: true

    # ✅ Publish Build Artifacts
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      condition: succeededOrFailed()
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)
        TargetPath: '\\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)'