trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  BuildParameters.RestoreBuildProjects: '**/*.csproj'
  BuildParameters.UnitTestProjects: |
    $(BuildParameters.RestoreBuildProjects)
    !**/*FunctionalTests*.csproj
    !**/*IntegrationTests*.csproj
    !**/BookWooks.OrderApi.FunctionalTests.csproj
    !**/BookyWooks.OrderApi.IntegrationTests.csproj
    !**/BookWooks.OrderApi.TestContainersIntegrationTests.csproj
    !**/SagaOrchestration.IntegrationTests.csproj
  BuildParameters.IntegrationTestProjects: |
    **/*IntegrationTests*.csproj
    **/BookWooks.OrderApi.TestContainersIntegrationTests.csproj
    !**/SagaOrchestration.IntegrationTests.csproj

jobs:
- job: BuildAndTest
  displayName: Build and Test with Testcontainers

  steps:
    # ✅ Ensure Docker is running and stable before Testcontainers starts
    - script: |
        sudo service docker start
        echo "Waiting for Docker to be ready..."
        until docker info >/dev/null 2>&1; do
          echo "Docker not ready yet, retrying..."
          sleep 2
        done
        docker info
      displayName: Ensure Docker is ready

    # ✅ Restore NuGet Packages
    - task: DotNetCoreCLI@2
      displayName: Restore NuGet Packages
      inputs:
        command: restore
        projects: $(BuildParameters.RestoreBuildProjects)
        configuration: $(buildConfiguration)

    # ✅ Build Solution
    - task: DotNetCoreCLI@2
      displayName: Build Solution
      inputs:
        command: build
        projects: |
          **/*.csproj
          !**/SagaOrchestration.IntegrationTests.csproj
        arguments: '--configuration $(buildConfiguration)'

    # ✅ Run Unit Tests
    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      inputs:
        command: test
        projects: $(BuildParameters.UnitTestProjects)
        arguments: --configuration $(buildConfiguration) --no-build --logger trx
      env:
        ASPNETCORE_ENVIRONMENT: Test

    # ✅ Run Integration Tests (Testcontainers with CI optimizations)
    - task: DotNetCoreCLI@2
      displayName: Run Integration Tests (Testcontainers)
      inputs:
        command: test
        projects: $(BuildParameters.IntegrationTestProjects)
        arguments: --configuration $(buildConfiguration) --no-build --logger trx
      env:
        # ASPNETCORE_ENVIRONMENT: Test
        TESTCONTAINERS_HOST_OVERRIDE: 'localhost'
        TESTCONTAINERS_RYUK_DISABLED: 'true'   # ✅ Disables Ryuk for CI reliability
        DOCKER_HOST: 'unix:///var/run/docker.sock'

    # ✅ Publish All Test Results
    - task: PublishTestResults@2
      displayName: Publish Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: '**/TestResults/*.trx'
        mergeTestResults: true

    # ✅ Publish App Artifacts (Optional)
    - task: DotNetCoreCLI@2
      displayName: Publish App
      inputs:
        command: publish
        publishWebProjects: false
        projects: $(BuildParameters.RestoreBuildProjects)
        arguments: --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
        zipAfterPublish: true

    # ✅ Publish Build Artifacts (Optional)
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      condition: succeededOrFailed()
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)
        TargetPath: '\\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)'
